# -*- coding: utf-8 -*-
"""2_trustedZone_Load.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/148uDG0ON__RczMHMvxcJli9sTNmybGC5

### Libraries installation and importation
"""

import duckdb
import pandas as pd
import Zones.config as conf

def trustedZone_load():
  """### DB Mounting"""
  dbFile_formatted = conf.DBFILE_FORMATTED_ZONE_PATH
  dbFile_trusted = conf.DBFILE_TRUSTED_ZONE_PATH


  con_formatted = duckdb.connect(dbFile_formatted, read_only=True)
  con_trusted = duckdb.connect(dbFile_trusted)


  """### Loading data from Formatted Zone to Trusted Zone"""

  cursor_formatted = con_formatted.cursor()
  cursor_trusted = con_trusted.cursor()

  tablenames_formatted = set(cursor_formatted.execute('select tablename from pg_tables').fetchdf()['tablename'])
  tablenames_trusted = set(cursor_trusted.execute('select tablename from pg_tables').fetchdf()['tablename'])
  tables_loaded = set(cursor_trusted.execute('select tablename from tables_loaded').fetchdf()['tablename'])

  for table_formatted in tablenames_formatted:
    #Checks that the table was not already loaded to the trusted zone
    if table_formatted not in tables_loaded:
      #Defines the table we are loading
      p = table_formatted.find('_')
      if p>=0:
        table_trusted = table_formatted[0:p]
      else:
        table_trusted = table_formatted

      #Gets the data from formatted zone
      df_source=cursor_formatted.execute('select * from ' + table_formatted).fetchdf()
      
      print(table_formatted+' -> '+table_trusted)
      
      #Reviews if the table exists in the trusted zone
      
      #If it exists it updates the table
      if table_trusted in  tablenames_trusted:

        #Here we concat the new table to the old table
        df_old = con_trusted.execute('SELECT * FROM '+ table_trusted).fetchdf()
        old_cols = set(df_old.columns)
        new_cols = set(df_source.columns)
        upd_cols = new_cols - old_cols

        df_union = pd.concat([df_old, df_source], ignore_index=True)
        con_trusted.execute('DROP TABLE '+ table_trusted)
        con_trusted.execute('CREATE TABLE IF NOT EXISTS ' + table_trusted + ' AS SELECT * FROM df_union')
      
      #If it not exits it creates the table (only works on the first execution)
      else:
        con_trusted.execute('CREATE TABLE IF NOT EXISTS ' + table_trusted + ' AS SELECT * FROM df_source')
        tablenames_trusted.add(table_trusted)

      #Registers the tablename in tables_loaded
      con_trusted.execute("INSERT INTO tables_loaded VALUES (NEXTVAL('tables_loaded_id'), '"+ table_formatted +"' , current_timestamp)")
  
  

  """Closing the DB connection"""

  con_formatted.close()
  con_trusted.close()