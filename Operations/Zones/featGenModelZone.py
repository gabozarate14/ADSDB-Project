# -*- coding: utf-8 -*-
"""Mixed_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ps5HnzbkP6U_PmyK2YQlOY9eoK_ZzOC


"""### Library Importation"""

import duckdb
import numpy as np
import pandas as pd
import Zones.config as conf

def featGenModelZone():

    """### DB Mounting"""

    dbFile_exploitation = conf.DBFILE_EXPLOITATION_ZONE_PATH
    con_exploitation = duckdb.connect(dbFile_exploitation, read_only=True)
    cursor_exp = con_exploitation.cursor()

    """## Model Developement

    ### Feature and row selection
    """

    query = """ select distinct sensorid, timestamp, holiday, temperature, rainfall, humidity, wind, 
                case when InstallationName like '%CEM%' then 0
                    else 1
                end as typeBuilding, value	
                from mergedTable 
                where InstallationName like '%CEM%' 

          """

    df=cursor_exp.execute(query).fetchdf()
    con_exploitation.close()
    df.head()

    """### Deletion of rows with NA values"""
    print("Deletion of rows with NA values")
    print("From: "+str(len(df)))
    df = df.dropna()
    print("to: "+str(len(df)))

    """### Data Preprocessing"""

    df['Year'] = df['timestamp'].apply(lambda time: time.year)
    df['Month'] = df['timestamp'].apply(lambda time: time.month)
    df['Day'] = df['timestamp'].apply(lambda time: time.day)
    df['Hour'] = df['timestamp'].apply(lambda time: time.hour)
    df['Minute'] = df['timestamp'].apply(lambda time: time.minute)

    df.drop('timestamp', axis=1, inplace=True)

    df['holiday'] = df['holiday'].astype(bool)

    cols = list(df.columns.values)
    cols.remove('value')
    cols.append('value')
    df = df[cols]
    x= df.iloc [:, : -1]  
    y= df.iloc [:, -1 :]
    
    print("Data preprocessed")

    """### Model Developement

    Splitting the data in train and test
    """
    print("Training the model ...")
    
    from sklearn.model_selection import train_test_split

    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state=1)

    """Fit Random forest regressor to the dataset"""

    from sklearn.ensemble import RandomForestRegressor

    # Instantiate model with 1000 decision trees
    rf = RandomForestRegressor(n_estimators = 1000,
                               random_state = 42,
                               min_samples_split = 10,
                               max_features = "sqrt",
                               bootstrap = True)

    # Train the model on training data
    rf.fit(X_train, y_train)


    print("Evaluating predictions ...")
    y_pred = rf.predict(X_test)


    """Evaluate the model"""

    from sklearn import metrics

    y_true = y_test # Your real values / test labels
    y_pred = y_pred # The predictions from your ML / RF model

    print('Metrics of the model:')
    print('Mean Absolute Error (MAE):', metrics.mean_absolute_error(y_true, y_pred))
    print('Mean Squared Error (MSE):', metrics.mean_squared_error(y_true, y_pred))
    print('Root Mean Squared Error (RMSE):', metrics.mean_squared_error(y_true, y_pred, squared=False))
    print('Mean Absolute Percentage Error (MAPE):', metrics.mean_absolute_percentage_error(y_true, y_pred))
    print('Explained Variance Score:', metrics.explained_variance_score(y_true, y_pred))
    print('Max Error:', metrics.max_error(y_true, y_pred))
    print('Mean Squared Log Error:', metrics.mean_squared_log_error(y_true, y_pred))
    print('Median Absolute Error:', metrics.median_absolute_error(y_true, y_pred))
    print('R^2:', metrics.r2_score(y_true, y_pred))