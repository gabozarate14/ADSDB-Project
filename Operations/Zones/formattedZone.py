# -*- coding: utf-8 -*-
"""formattedZone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oUi59GJyjVwg9fDLmRh3ZBq9CFgaU1s1

"""

"""### Libraries importation"""

import duckdb
import pandas as pd
import os
import json
import Zones.config as conf


def formattedZone():

  """### Definition of the system routes and mounting the DB
  
  Here we define the routes of:

  *   Where the files of the Persistent Landing Zone that are about to be loaded are
  *   The Formatted Zone database

  """
  dbFile_formatted = conf.DBFILE_FORMATTED_ZONE_PATH
  data_directory_persistent = conf.PERSISTENT_LANDING_ZONE_PATH

  con = duckdb.connect(dbFile_formatted)

  """### Loading data from Persistent Landing Zone to  Formatted Zone"""

  #Variable initialization

  sensorsTable = ""
  componentsTable = ""

  #We go through the folder of the Persistent Landing Zone ehere the files to load are 
  for root, subdirs, files in os.walk(data_directory_persistent):
     
     #Verify if there are files to load
     if len(files) > 0:

       #We go through each file
      for filename in files:
        file_path = root + '/' + filename

        #In case it is a sensors/componentes/observations file (CSV file)
        if '.csv' in filename:
          df = pd.read_csv(file_path)
          tablename = filename.replace(".csv", "")
          
        #In case it is a weather/humidity/precipitations measurements (JSON file)
        elif '.json' in filename:
          with open(file_path) as json_file:
            data = json.load(json_file)
            df = pd.DataFrame.from_records(data['measurements'])
            tablename = filename.replace("measurements", "").replace(".json", "")
        
        #Now we review if the new data to be

        con.execute('CREATE TABLE IF NOT EXISTS ' + tablename + ' AS SELECT * FROM df')

  """### Display of the tables loaded in the Formatted Zone"""

  cursor = con.cursor()
  df2=cursor.execute('select * from pg_tables').fetchdf()
  #display(df2)
  for row in df2['tablename']:
    df=cursor.execute(f"select * from {row}").fetchdf()
    print(f"{row} - {len(df)}")

  """### Closing the connection"""

  con.close()