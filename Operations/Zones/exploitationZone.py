# -*- coding: utf-8 -*-
"""exploitationZone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hqhu7lPO7xSV83WyTOh5WAocIGJOYRbA

"""
import duckdb
import pandas as pd
import Zones.config as conf

def exploitationZone():
  dbFile_trusted = conf.DBFILE_TRUSTED_ZONE_PATH
  dbFile_exploitation = conf.DBFILE_EXPLOITATION_ZONE_PATH

  con_trusted = duckdb.connect(dbFile_trusted, read_only=True)
  con_exploitation = duckdb.connect(dbFile_exploitation)

  cursor_trusted = con_trusted.cursor()
  cursor_exp = con_exploitation.cursor()

  #cursor_exp.execute("drop table mergedTable")

  """### Generating the Exploitation view"""

  #Checks if the table was already created
  if 'mergedTable' in set(cursor_exp.execute("select tablename from pg_tables").fetchdf()['tablename']):
    cursor_exp.execute("drop table mergedTable")
  query = ''' select * 
              from pg_tables
          '''

  weatherDFs = {
    'precipitations': None,
    'humidity': None,
    'wind': None
  }
  sensorDFs = {
      'componentes': None,
      'sensors': None,
      'observations': None
  }
  df = cursor_trusted.execute(query).fetchdf()
  for tableName in df['tablename']:
    df=cursor_trusted.execute(f"select * from {tableName}").fetchdf()
    if tableName in weatherDFs:
      weatherDFs[tableName]=df
    elif tableName in sensorDFs:
      sensorDFs[tableName]=df

  ## WEATHER TRANSFORMATIONS
  weather_df = cursor_trusted.execute(f"select timestamp, holiday, value from weather LEFT JOIN holidays ON strftime(weather.timestamp, '%Y-%m-%d') = strftime(holidays.date, '%Y-%m-%d')").fetchdf()
  weather_df.rename(columns={'value': 'temperature'}, inplace=True)


  rainfall_df = weatherDFs['precipitations']
  rainfall_df.rename(columns={'value': 'rainfall'}, inplace=True)

  humidity_df = weatherDFs['humidity']
  humidity_df.rename(columns={'value': 'humidity'}, inplace=True)

  wind_df = weatherDFs['wind']
  wind_df.rename(columns={'value': 'wind'}, inplace=True)

  # Weather View
  merged_df=weather_df.merge(rainfall_df, left_on='timestamp', right_on='timestamp',how='outer')
  merged_df=merged_df.merge(humidity_df, left_on='timestamp', right_on='timestamp',how='outer')
  merged_df=merged_df.merge(wind_df, left_on='timestamp', right_on='timestamp',how='outer')
  merged_df['timestamp']=merged_df['timestamp'].apply(lambda dt: dt.replace(minute=0, second=0, microsecond=0))
  daily_weather_df= merged_df.groupby('timestamp').mean()

  ## ENERGY MEASUREMENTS TRANSFORMATIONS
  observations_df = sensorDFs['observations']

  observations_df.rename(columns={'published_at': 'timestamp'}, inplace=True)
  observations_df['timestamp']=observations_df['timestamp'].apply(lambda dt: dt.replace(minute=0, second=0, microsecond=0))
  observations_df=observations_df.groupby(['timestamp','sensorid'], as_index=False).agg({"value": "sum"})

  sensors_df = sensorDFs['sensors'][["SensorID","SensorName","Granularity","InstallationID","MeasurementUnit"]]
  sensors_df.rename(columns={'SensorID': 'sensorid'}, inplace=True)

  components_df = sensorDFs['componentes'][["InstallationID","InstallationName"]]

  # Energy View
  daily_energy_df=observations_df.merge(sensors_df, left_on='sensorid', right_on='sensorid',how='outer')
  daily_energy_df=daily_energy_df.merge(components_df, left_on='InstallationID', right_on='InstallationID',how='outer')

  # General View
  final_df=daily_weather_df.merge(daily_energy_df, left_on='timestamp', right_on='timestamp',how='outer').sort_values(by='timestamp', ignore_index=True)
  #display(final_df.iloc[7000:7010,:])

  cursor_exp.execute(f"create table mergedTable as select * from final_df")

  """### Closing DB conection"""

  con_exploitation.close()
  con_trusted.close()